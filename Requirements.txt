Required Modules:
	body-parser
	cookie-parser
	csv-parser
	csv-writer
	csvtojson
	express
	path
	mysql2
	nodemon
	pug
	fs

Delete All Tables Path: /DropAll


Copying All Create Tables SQL Queries from CRUD.js:

// Create USERS Table
const CreateUserTable = (req, res) => {
    const Q1 = 'CREATE TABLE IF NOT EXISTS `USERS` (\
        ID int(9) NOT NULL,\
        Email varchar(50) NOT NULL,\
        FullName varchar(50) NOT NULL,\
        UserName varchar(50) PRIMARY KEY NOT NULL,\
        Password varchar(50) NOT NULL,\
        CourseNumber varchar(3) NOT NULL\
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8';
    SQL.query(Q1, (err, mysqlres) => {
        if (err) {
            console.log(err);
            return;
        }
        console.log("users created");
        res.redirect('/CRUD.InsertCSVUsers');
        })
};

// Create Recipes Table
const CreateRecipesTable = (req, res) => {
    const DropTable = 'DROP TABLE IF EXISTS RECIPES '
    SQL.query(DropTable, (err, mysqlres) => {
        if (err) {
          console.log(err);
          return;
        }
    const Q1 = 'CREATE TABLE IF NOT EXISTS `RECIPES` (\
        ID int(1) NOT NULL PRIMARY KEY,\
        Name varchar(50) NOT NULL,\
        Instructions varchar(250) NOT NULL,\
        Picture varchar(50) NOT NULL\
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8';
    SQL.query(Q1, (err, mysqlres) => {
        if (err) {
            console.log(err);
            res.send(err);
            return;
        }
        console.log("Recipes Created");
        res.redirect('/CRUD.InsertCSVRecipes')
    })
})};

//Create REC-ING table
const CreateRecipesIngredientsTable = (req, res) => {
    const Q1 = `CREATE TABLE IF NOT EXISTS REC_ING (
      R_ID int(1) NOT NULL,
      I_ID int(1) NOT NULL
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8`;
    const Q2 = 'ALTER TABLE `REC_ING` ADD PRIMARY KEY (R_ID, I_ID)';
    const DropTable = 'DROP TABLE IF EXISTS REC_ING '
    SQL.query(DropTable, (err, mysqlres) => {
        if (err) {
          console.log(err);
          return;
        }
        SQL.query(Q1, (err, mysqlres) => {
        if (err) {
        console.log(err);
        return;
        }
        SQL.query(Q2, (err, mysqlres3) => {
          if (err) {
            console.log(err);
            return;
          }
        });
      });
      res.redirect('/CRUD.InsertCSVRecipesIngredients')
    })};

//Create User's ING table
const CreateUserINGTable = (req, res) => {
    const DropTable = 'DROP TABLE IF EXISTS USR_ING '
    SQL.query(DropTable, (err, mysqlres) => {
        if (err) {
          console.log(err);
          return;
        }
    const Q1 = 'CREATE TABLE IF NOT EXISTS USR_ING (IngID int NOT NULL)';
    SQL.query(Q1, (err, mysqlres) => {
      if (err) {
        console.log(err);
        return;
      }
      res.redirect('/CRUD.CreateRecipesTable')
    });
  })};

//******** Users found recipes according to his ingredients
const FindUsrRecipes = (req, res) => {
    const dropTableQuery = "DROP TABLE IF EXISTS USR_RECIPES";
    const createTableQuery = "CREATE TABLE USR_RECIPES (ID INT, Name VARCHAR(255), Instructions VARCHAR(255), Picture VARCHAR(255))";
    const insertDataQuery = "INSERT INTO USR_RECIPES (ID, Name, Instructions, Picture) \
    SELECT R.ID, R.Name, R.Instructions, R.Picture \
    FROM RECIPES AS R \
    JOIN REC_ING AS RI ON R.ID = RI.R_ID \
    LEFT JOIN USR_ING AS UI ON UI.IngID = RI.I_ID \
    GROUP BY R.ID, R.Name, R.Instructions, R.Picture \
    HAVING COUNT(DISTINCT RI.I_ID) = COUNT(DISTINCT UI.IngID) \
       AND COUNT(DISTINCT RI.I_ID) = (SELECT COUNT(*) FROM REC_ING WHERE R_ID = R.ID)";

        console.log("USR_RECIPES deleted if exists")
        //Drop table if exists in order to create new one for new user
        SQL.query(dropTableQuery, (error, result) => {
            if (error) {
                console.error("Error dropping USR_RECIPES table:", error);
                return;
            }
            // create table
            SQL.query(createTableQuery, (error, result) => {
                if (error) {
                    console.error("Error creating USR_RECIPES table:", error);
                    return;
                }
                //inserting correct recipes into table according to users input using sql logic
                SQL.query(insertDataQuery, (error, result) => {
                    if (error) {
                        console.error("Error inserting data into USR_RECIPES table:", error);
                        return;
                    }
                    console.log("USR_RECIPES table created and data inserted successfully");
                    res.redirect('/UsrRec2'); // Redirects to render pug with users recipes
                });
            });
        });
    };


